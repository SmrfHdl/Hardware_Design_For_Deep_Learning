// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="processImage,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.283000,HLS_SYN_LAT=786953,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=5,HLS_SYN_FF=1179,HLS_SYN_LUT=1461,HLS_VERSION=2018_3}" *)

module processImage (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inStream_V_data_V_dout,
        inStream_V_data_V_empty_n,
        inStream_V_data_V_read,
        inStream_V_keep_V_dout,
        inStream_V_keep_V_empty_n,
        inStream_V_keep_V_read,
        inStream_V_strb_V_dout,
        inStream_V_strb_V_empty_n,
        inStream_V_strb_V_read,
        inStream_V_user_V_dout,
        inStream_V_user_V_empty_n,
        inStream_V_user_V_read,
        inStream_V_last_V_dout,
        inStream_V_last_V_empty_n,
        inStream_V_last_V_read,
        inStream_V_id_V_dout,
        inStream_V_id_V_empty_n,
        inStream_V_id_V_read,
        inStream_V_dest_V_dout,
        inStream_V_dest_V_empty_n,
        inStream_V_dest_V_read,
        outStream_V_data_V_din,
        outStream_V_data_V_full_n,
        outStream_V_data_V_write,
        outStream_V_keep_V_din,
        outStream_V_keep_V_full_n,
        outStream_V_keep_V_write,
        outStream_V_strb_V_din,
        outStream_V_strb_V_full_n,
        outStream_V_strb_V_write,
        outStream_V_user_V_din,
        outStream_V_user_V_full_n,
        outStream_V_user_V_write,
        outStream_V_last_V_din,
        outStream_V_last_V_full_n,
        outStream_V_last_V_write,
        outStream_V_id_V_din,
        outStream_V_id_V_full_n,
        outStream_V_id_V_write,
        outStream_V_dest_V_din,
        outStream_V_dest_V_full_n,
        outStream_V_dest_V_write,
        kernel_0,
        kernel_1,
        kernel_2,
        kernel_3,
        kernel_4,
        kernel_5,
        kernel_6,
        kernel_7,
        kernel_8
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_state11 = 6'd16;
parameter    ap_ST_fsm_state12 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] inStream_V_data_V_dout;
input   inStream_V_data_V_empty_n;
output   inStream_V_data_V_read;
input  [0:0] inStream_V_keep_V_dout;
input   inStream_V_keep_V_empty_n;
output   inStream_V_keep_V_read;
input  [0:0] inStream_V_strb_V_dout;
input   inStream_V_strb_V_empty_n;
output   inStream_V_strb_V_read;
input  [1:0] inStream_V_user_V_dout;
input   inStream_V_user_V_empty_n;
output   inStream_V_user_V_read;
input  [0:0] inStream_V_last_V_dout;
input   inStream_V_last_V_empty_n;
output   inStream_V_last_V_read;
input  [4:0] inStream_V_id_V_dout;
input   inStream_V_id_V_empty_n;
output   inStream_V_id_V_read;
input  [5:0] inStream_V_dest_V_dout;
input   inStream_V_dest_V_empty_n;
output   inStream_V_dest_V_read;
output  [7:0] outStream_V_data_V_din;
input   outStream_V_data_V_full_n;
output   outStream_V_data_V_write;
output  [0:0] outStream_V_keep_V_din;
input   outStream_V_keep_V_full_n;
output   outStream_V_keep_V_write;
output  [0:0] outStream_V_strb_V_din;
input   outStream_V_strb_V_full_n;
output   outStream_V_strb_V_write;
output  [1:0] outStream_V_user_V_din;
input   outStream_V_user_V_full_n;
output   outStream_V_user_V_write;
output  [0:0] outStream_V_last_V_din;
input   outStream_V_last_V_full_n;
output   outStream_V_last_V_write;
output  [4:0] outStream_V_id_V_din;
input   outStream_V_id_V_full_n;
output   outStream_V_id_V_write;
output  [5:0] outStream_V_dest_V_din;
input   outStream_V_dest_V_full_n;
output   outStream_V_dest_V_write;
input  [7:0] kernel_0;
input  [7:0] kernel_1;
input  [7:0] kernel_2;
input  [7:0] kernel_3;
input  [7:0] kernel_4;
input  [7:0] kernel_5;
input  [7:0] kernel_6;
input  [7:0] kernel_7;
input  [7:0] kernel_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] outStream_V_data_V_din;
reg[0:0] outStream_V_keep_V_din;
reg[0:0] outStream_V_strb_V_din;
reg[1:0] outStream_V_user_V_din;
reg[0:0] outStream_V_last_V_din;
reg[4:0] outStream_V_id_V_din;
reg[5:0] outStream_V_dest_V_din;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inStream_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond2_reg_897;
reg    inStream_V_keep_V_blk_n;
reg    inStream_V_strb_V_blk_n;
reg    inStream_V_user_V_blk_n;
reg    inStream_V_last_V_blk_n;
reg    inStream_V_id_V_blk_n;
reg    inStream_V_dest_V_blk_n;
reg    outStream_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage2;
reg   [0:0] tmp_13_reg_938;
reg   [0:0] tmp_13_reg_938_pp0_iter2_reg;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_847_p2;
reg    outStream_V_keep_V_blk_n;
reg    outStream_V_strb_V_blk_n;
reg    outStream_V_user_V_blk_n;
reg    outStream_V_last_V_blk_n;
reg    outStream_V_id_V_blk_n;
reg    outStream_V_dest_V_blk_n;
reg   [4:0] tmp_id_V_1_reg_371;
reg   [1:0] tmp_user_V_1_reg_384;
reg   [0:0] tmp_strb_V_1_reg_397;
reg   [0:0] tmp_keep_V_1_reg_410;
reg   [5:0] tmp_dest_V_1_reg_423;
reg   [31:0] idxRow_reg_436;
reg   [31:0] idxCol_assign_reg_447;
reg   [31:0] pixConvolved_assign_reg_458;
reg   [18:0] countWait_reg_470;
wire   [7:0] lineBuff_val_0_q1;
reg   [7:0] reg_493;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] or_cond_reg_916;
wire   [7:0] lineBuff_val_0_q0;
wire    inStream_V_id_V0_status;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond2_reg_897_pp0_iter1_reg;
reg   [0:0] or_cond_reg_916_pp0_iter1_reg;
wire   [0:0] exitcond2_fu_498_p2;
reg   [0:0] exitcond2_reg_897_pp0_iter2_reg;
wire   [63:0] tmp_s_fu_504_p1;
reg   [63:0] tmp_s_reg_901;
reg   [8:0] lineBuff_val_1_addr_reg_906;
reg   [8:0] lineBuff_val_2_addr_reg_911;
wire   [0:0] or_cond_fu_542_p2;
reg   [0:0] or_cond_reg_916_pp0_iter2_reg;
wire   [0:0] tmp_12_fu_548_p2;
reg   [0:0] tmp_12_reg_922;
wire   [31:0] idxCol_fu_554_p2;
reg   [31:0] idxCol_reg_928;
wire   [31:0] idxRow_1_fu_566_p3;
reg   [31:0] idxRow_1_reg_933;
wire   [0:0] tmp_13_fu_574_p2;
reg   [0:0] tmp_13_reg_938_pp0_iter1_reg;
reg   [0:0] tmp_keep_V_reg_942;
reg   [0:0] tmp_keep_V_reg_942_pp0_iter1_reg;
reg   [0:0] tmp_keep_V_reg_942_pp0_iter2_reg;
reg   [0:0] tmp_strb_V_reg_948;
reg   [0:0] tmp_strb_V_reg_948_pp0_iter1_reg;
reg   [0:0] tmp_strb_V_reg_948_pp0_iter2_reg;
reg   [1:0] tmp_user_V_reg_954;
reg   [1:0] tmp_user_V_reg_954_pp0_iter1_reg;
reg   [1:0] tmp_user_V_reg_954_pp0_iter2_reg;
reg   [4:0] tmp_id_V_reg_960;
reg   [4:0] tmp_id_V_reg_960_pp0_iter1_reg;
reg   [4:0] tmp_id_V_reg_960_pp0_iter2_reg;
reg   [5:0] tmp_dest_V_reg_966;
reg   [5:0] tmp_dest_V_reg_966_pp0_iter1_reg;
reg   [5:0] tmp_dest_V_reg_966_pp0_iter2_reg;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    outStream_V_id_V1_status;
reg    ap_block_state10_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_11001;
reg   [7:0] kernel_0_read_reg_977;
reg  signed [7:0] kernel_1_read_reg_987;
wire   [31:0] col_assign_1_0_2_fu_625_p2;
reg   [31:0] col_assign_1_0_2_reg_992;
reg  signed [7:0] kernel_2_read_reg_997;
reg   [7:0] kernel_3_read_reg_1007;
reg  signed [7:0] kernel_3_read_reg_1007_pp0_iter1_reg;
reg   [7:0] kernel_4_read_reg_1017;
reg  signed [7:0] kernel_5_read_reg_1022;
reg  signed [7:0] kernel_6_read_reg_1032;
reg   [7:0] kernel_7_read_reg_1042;
reg   [7:0] kernel_8_read_reg_1047;
wire   [31:0] idxCol_1_fu_638_p3;
reg   [31:0] idxCol_1_reg_1052;
wire   [31:0] pixConvolved_2_fu_644_p3;
reg   [31:0] pixConvolved_2_reg_1057;
wire   [18:0] phitmp_fu_651_p2;
reg   [18:0] phitmp_reg_1062;
wire   [15:0] window_val_0_0_fu_664_p2;
reg   [15:0] window_val_0_0_reg_1067;
wire   [7:0] lineBuff_val_1_q1;
reg   [7:0] lineBuff_val_1_load_1_reg_1077;
wire   [15:0] window_val_1_1_fu_683_p2;
reg   [15:0] window_val_1_1_reg_1082;
wire   [7:0] lineBuff_val_2_q1;
reg   [7:0] lineBuff_val_2_load_1_reg_1092;
wire   [7:0] lineBuff_val_2_q0;
reg   [7:0] lineBuff_val_2_load_2_reg_1097;
reg   [7:0] lineBuff_val_1_load_3_reg_1107;
wire   [15:0] window_val_2_2_fu_721_p2;
reg   [15:0] window_val_2_2_reg_1112;
wire  signed [15:0] grp_fu_866_p3;
reg  signed [15:0] tmp8_reg_1117;
wire  signed [15:0] grp_fu_859_p3;
reg  signed [15:0] tmp1_reg_1122;
(* use_dsp48 = "no" *) wire   [15:0] tmp7_fu_740_p2;
reg   [15:0] tmp7_reg_1127;
wire  signed [15:0] grp_fu_874_p3;
reg  signed [15:0] tmp2_reg_1132;
wire  signed [15:0] valOutput_fu_754_p2;
reg  signed [15:0] valOutput_reg_1137;
reg   [0:0] tmp_5_reg_1142;
reg   [12:0] tmp_7_reg_1147;
wire   [7:0] tmp_data_V_fu_840_p3;
reg   [7:0] tmp_data_V_reg_1152;
wire   [9:0] countWait_2_fu_853_p2;
reg    ap_block_state12;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage2_subdone;
reg   [8:0] lineBuff_val_0_address0;
reg    lineBuff_val_0_ce0;
reg    lineBuff_val_0_we0;
wire   [8:0] lineBuff_val_0_address1;
reg    lineBuff_val_0_ce1;
reg   [8:0] lineBuff_val_1_address0;
reg    lineBuff_val_1_ce0;
reg    lineBuff_val_1_we0;
wire   [7:0] lineBuff_val_1_q0;
reg   [8:0] lineBuff_val_1_address1;
reg    lineBuff_val_1_ce1;
reg   [8:0] lineBuff_val_2_address0;
reg    lineBuff_val_2_ce0;
reg    lineBuff_val_2_we0;
reg   [8:0] lineBuff_val_2_address1;
reg    lineBuff_val_2_ce1;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_440_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_idxCol_assign_phi_fu_451_p4;
reg   [31:0] ap_phi_mux_pixConvolved_assign_phi_fu_462_p4;
reg   [18:0] ap_phi_mux_countWait_phi_fu_474_p4;
reg   [9:0] countWait_1_reg_482;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_3_fu_605_p1;
wire   [63:0] tmp_19_0_1_fu_618_p1;
wire   [63:0] tmp_19_0_2_fu_670_p1;
reg    inStream_V_id_V0_update;
reg    outStream_V_id_V1_update;
reg    ap_block_pp0_stage2_01001;
wire   [30:0] tmp_2_fu_510_p4;
wire   [30:0] tmp_4_fu_526_p4;
wire   [0:0] icmp_fu_520_p2;
wire   [0:0] icmp3_fu_536_p2;
wire   [31:0] idxRow_2_fu_560_p2;
wire   [31:0] pixConvolved_fu_612_p2;
wire   [31:0] pixConvolved_1_fu_631_p3;
wire  signed [7:0] window_val_0_0_fu_664_p0;
wire   [7:0] window_val_0_0_fu_664_p1;
wire  signed [7:0] window_val_1_1_fu_683_p0;
wire   [7:0] window_val_1_1_fu_683_p1;
wire  signed [7:0] window_val_2_1_fu_708_p0;
wire   [7:0] window_val_2_1_fu_708_p1;
wire  signed [7:0] window_val_2_2_fu_721_p0;
wire   [7:0] window_val_2_2_fu_721_p1;
wire  signed [15:0] grp_fu_881_p3;
wire  signed [15:0] grp_fu_889_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp4_fu_750_p2;
wire  signed [16:0] tmp_7_tr_fu_777_p1;
wire   [16:0] p_neg_fu_780_p2;
wire   [13:0] tmp_6_fu_786_p4;
wire   [14:0] tmp_3_cast_fu_796_p1;
wire  signed [13:0] tmp_8_fu_800_p1;
wire   [14:0] tmp_9_fu_803_p2;
wire   [14:0] tmp_10_cast_fu_809_p1;
wire   [14:0] valOutput_1_fu_813_p3;
wire   [0:0] tmp_11_fu_824_p3;
wire   [7:0] tmp_10_fu_820_p1;
wire   [7:0] phitmp8_fu_832_p3;
wire   [7:0] grp_fu_859_p1;
wire   [7:0] grp_fu_866_p1;
wire   [15:0] grp_fu_866_p2;
wire   [7:0] grp_fu_874_p1;
wire   [7:0] grp_fu_881_p1;
wire   [7:0] grp_fu_889_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_859_p10;
wire   [15:0] grp_fu_866_p10;
wire   [15:0] grp_fu_874_p10;
wire   [15:0] grp_fu_881_p10;
wire   [15:0] grp_fu_889_p10;
wire   [15:0] window_val_0_0_fu_664_p10;
wire   [15:0] window_val_1_1_fu_683_p10;
wire   [15:0] window_val_2_1_fu_708_p10;
wire   [15:0] window_val_2_2_fu_721_p10;
reg    ap_condition_319;
reg    ap_condition_337;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

processImage_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_0_address0),
    .ce0(lineBuff_val_0_ce0),
    .we0(lineBuff_val_0_we0),
    .d0(lineBuff_val_1_q0),
    .q0(lineBuff_val_0_q0),
    .address1(lineBuff_val_0_address1),
    .ce1(lineBuff_val_0_ce1),
    .q1(lineBuff_val_0_q1)
);

processImage_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_1_address0),
    .ce0(lineBuff_val_1_ce0),
    .we0(lineBuff_val_1_we0),
    .d0(lineBuff_val_2_q0),
    .q0(lineBuff_val_1_q0),
    .address1(lineBuff_val_1_address1),
    .ce1(lineBuff_val_1_ce1),
    .q1(lineBuff_val_1_q1)
);

processImage_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_2_address0),
    .ce0(lineBuff_val_2_ce0),
    .we0(lineBuff_val_2_we0),
    .d0(inStream_V_data_V_dout),
    .q0(lineBuff_val_2_q0),
    .address1(lineBuff_val_2_address1),
    .ce1(lineBuff_val_2_ce1),
    .q1(lineBuff_val_2_q1)
);

processImage_mac_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
processImage_mac_eOg_U1(
    .din0(kernel_1_read_reg_987),
    .din1(grp_fu_859_p1),
    .din2(window_val_0_0_reg_1067),
    .dout(grp_fu_859_p3)
);

processImage_mac_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
processImage_mac_eOg_U2(
    .din0(kernel_6_read_reg_1032),
    .din1(grp_fu_866_p1),
    .din2(grp_fu_866_p2),
    .dout(grp_fu_866_p3)
);

processImage_mac_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
processImage_mac_eOg_U3(
    .din0(kernel_2_read_reg_997),
    .din1(grp_fu_874_p1),
    .din2(window_val_2_2_reg_1112),
    .dout(grp_fu_874_p3)
);

processImage_mac_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
processImage_mac_eOg_U4(
    .din0(kernel_5_read_reg_1022),
    .din1(grp_fu_881_p1),
    .din2(window_val_1_1_reg_1082),
    .dout(grp_fu_881_p3)
);

processImage_mac_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
processImage_mac_fYi_U5(
    .din0(kernel_3_read_reg_1007_pp0_iter1_reg),
    .din1(grp_fu_889_p1),
    .din2(tmp2_reg_1132),
    .dout(grp_fu_889_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        countWait_1_reg_482 <= 10'd0;
    end else if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        countWait_1_reg_482 <= countWait_2_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_897 == 1'd0))) begin
        countWait_reg_470 <= phitmp_reg_1062;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        countWait_reg_470 <= 19'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_897 == 1'd0))) begin
        idxCol_assign_reg_447 <= idxCol_1_reg_1052;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idxCol_assign_reg_447 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_897 == 1'd0))) begin
        idxRow_reg_436 <= idxRow_1_reg_933;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idxRow_reg_436 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0))) begin
        pixConvolved_assign_reg_458 <= pixConvolved_2_reg_1057;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pixConvolved_assign_reg_458 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_337)) begin
            reg_493 <= lineBuff_val_0_q0;
        end else if ((1'b1 == ap_condition_319)) begin
            reg_493 <= lineBuff_val_0_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_cond_reg_916 == 1'd1) & (exitcond2_reg_897 == 1'd0))) begin
        col_assign_1_0_2_reg_992 <= col_assign_1_0_2_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond2_reg_897 <= exitcond2_fu_498_p2;
        exitcond2_reg_897_pp0_iter1_reg <= exitcond2_reg_897;
        exitcond2_reg_897_pp0_iter2_reg <= exitcond2_reg_897_pp0_iter1_reg;
        or_cond_reg_916_pp0_iter1_reg <= or_cond_reg_916;
        or_cond_reg_916_pp0_iter2_reg <= or_cond_reg_916_pp0_iter1_reg;
        tmp_13_reg_938_pp0_iter1_reg <= tmp_13_reg_938;
        tmp_13_reg_938_pp0_iter2_reg <= tmp_13_reg_938_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond2_reg_897 == 1'd0))) begin
        idxCol_1_reg_1052 <= idxCol_1_fu_638_p3;
        phitmp_reg_1062 <= phitmp_fu_651_p2;
        pixConvolved_2_reg_1057 <= pixConvolved_2_fu_644_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_fu_498_p2 == 1'd0))) begin
        idxCol_reg_928 <= idxCol_fu_554_p2;
        lineBuff_val_1_addr_reg_906 <= tmp_s_fu_504_p1;
        lineBuff_val_2_addr_reg_911 <= tmp_s_fu_504_p1;
        or_cond_reg_916 <= or_cond_fu_542_p2;
        tmp_12_reg_922 <= tmp_12_fu_548_p2;
        tmp_13_reg_938 <= tmp_13_fu_574_p2;
        tmp_s_reg_901[31 : 0] <= tmp_s_fu_504_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_fu_498_p2 == 1'd0))) begin
        idxRow_1_reg_933 <= idxRow_1_fu_566_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond2_reg_897 == 1'd0))) begin
        kernel_0_read_reg_977 <= kernel_0;
        kernel_1_read_reg_987 <= kernel_1;
        kernel_2_read_reg_997 <= kernel_2;
        kernel_3_read_reg_1007 <= kernel_3;
        kernel_4_read_reg_1017 <= kernel_4;
        kernel_5_read_reg_1022 <= kernel_5;
        kernel_6_read_reg_1032 <= kernel_6;
        kernel_7_read_reg_1042 <= kernel_7;
        kernel_8_read_reg_1047 <= kernel_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        kernel_3_read_reg_1007_pp0_iter1_reg <= kernel_3_read_reg_1007;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_916 == 1'd1) & (exitcond2_reg_897 == 1'd0))) begin
        lineBuff_val_1_load_1_reg_1077 <= lineBuff_val_1_q1;
        lineBuff_val_2_load_1_reg_1092 <= lineBuff_val_2_q1;
        lineBuff_val_2_load_2_reg_1097 <= lineBuff_val_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_cond_reg_916_pp0_iter1_reg == 1'd1) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0))) begin
        lineBuff_val_1_load_3_reg_1107 <= lineBuff_val_1_q1;
        tmp1_reg_1122 <= grp_fu_859_p3;
        tmp8_reg_1117 <= grp_fu_866_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_cond_reg_916_pp0_iter1_reg == 1'd1) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0))) begin
        tmp2_reg_1132 <= grp_fu_874_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_cond_reg_916_pp0_iter1_reg == 1'd1) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0))) begin
        tmp7_reg_1127 <= tmp7_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_916_pp0_iter1_reg == 1'd1) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0))) begin
        tmp_5_reg_1142 <= valOutput_fu_754_p2[32'd15];
        tmp_7_reg_1147 <= {{valOutput_fu_754_p2[15:3]}};
        valOutput_reg_1137 <= valOutput_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_897_pp0_iter2_reg == 1'd0))) begin
        tmp_data_V_reg_1152 <= tmp_data_V_fu_840_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond2_reg_897_pp0_iter2_reg == 1'd0))) begin
        tmp_dest_V_1_reg_423 <= tmp_dest_V_reg_966_pp0_iter2_reg;
        tmp_id_V_1_reg_371 <= tmp_id_V_reg_960_pp0_iter2_reg;
        tmp_keep_V_1_reg_410 <= tmp_keep_V_reg_942_pp0_iter2_reg;
        tmp_strb_V_1_reg_397 <= tmp_strb_V_reg_948_pp0_iter2_reg;
        tmp_user_V_1_reg_384 <= tmp_user_V_reg_954_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_897 == 1'd0))) begin
        tmp_dest_V_reg_966 <= inStream_V_dest_V_dout;
        tmp_id_V_reg_960 <= inStream_V_id_V_dout;
        tmp_keep_V_reg_942 <= inStream_V_keep_V_dout;
        tmp_strb_V_reg_948 <= inStream_V_strb_V_dout;
        tmp_user_V_reg_954 <= inStream_V_user_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_dest_V_reg_966_pp0_iter1_reg <= tmp_dest_V_reg_966;
        tmp_dest_V_reg_966_pp0_iter2_reg <= tmp_dest_V_reg_966_pp0_iter1_reg;
        tmp_id_V_reg_960_pp0_iter1_reg <= tmp_id_V_reg_960;
        tmp_id_V_reg_960_pp0_iter2_reg <= tmp_id_V_reg_960_pp0_iter1_reg;
        tmp_keep_V_reg_942_pp0_iter1_reg <= tmp_keep_V_reg_942;
        tmp_keep_V_reg_942_pp0_iter2_reg <= tmp_keep_V_reg_942_pp0_iter1_reg;
        tmp_strb_V_reg_948_pp0_iter1_reg <= tmp_strb_V_reg_948;
        tmp_strb_V_reg_948_pp0_iter2_reg <= tmp_strb_V_reg_948_pp0_iter1_reg;
        tmp_user_V_reg_954_pp0_iter1_reg <= tmp_user_V_reg_954;
        tmp_user_V_reg_954_pp0_iter2_reg <= tmp_user_V_reg_954_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_916 == 1'd1) & (exitcond2_reg_897 == 1'd0))) begin
        window_val_0_0_reg_1067 <= window_val_0_0_fu_664_p2;
        window_val_1_1_reg_1082 <= window_val_1_1_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_cond_reg_916_pp0_iter1_reg == 1'd1) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0))) begin
        window_val_2_2_reg_1112 <= window_val_2_2_fu_721_p2;
    end
end

always @ (*) begin
    if ((exitcond2_fu_498_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_897 == 1'd0))) begin
        ap_phi_mux_countWait_phi_fu_474_p4 = phitmp_reg_1062;
    end else begin
        ap_phi_mux_countWait_phi_fu_474_p4 = countWait_reg_470;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_897 == 1'd0))) begin
        ap_phi_mux_idxCol_assign_phi_fu_451_p4 = idxCol_1_reg_1052;
    end else begin
        ap_phi_mux_idxCol_assign_phi_fu_451_p4 = idxCol_assign_reg_447;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_897 == 1'd0))) begin
        ap_phi_mux_idxRow_phi_fu_440_p4 = idxRow_1_reg_933;
    end else begin
        ap_phi_mux_idxRow_phi_fu_440_p4 = idxRow_reg_436;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_pixConvolved_assign_phi_fu_462_p4 = pixConvolved_2_reg_1057;
    end else begin
        ap_phi_mux_pixConvolved_assign_phi_fu_462_p4 = pixConvolved_assign_reg_458;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_data_V_blk_n = inStream_V_data_V_empty_n;
    end else begin
        inStream_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_dest_V_blk_n = inStream_V_dest_V_empty_n;
    end else begin
        inStream_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_897 == 1'd0))) begin
        inStream_V_id_V0_update = 1'b1;
    end else begin
        inStream_V_id_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_id_V_blk_n = inStream_V_id_V_empty_n;
    end else begin
        inStream_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_keep_V_blk_n = inStream_V_keep_V_empty_n;
    end else begin
        inStream_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_last_V_blk_n = inStream_V_last_V_empty_n;
    end else begin
        inStream_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_strb_V_blk_n = inStream_V_strb_V_empty_n;
    end else begin
        inStream_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond2_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_user_V_blk_n = inStream_V_user_V_empty_n;
    end else begin
        inStream_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuff_val_0_address0 = tmp_19_0_2_fu_670_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        lineBuff_val_0_address0 = tmp_3_fu_605_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        lineBuff_val_0_address0 = tmp_s_reg_901;
    end else begin
        lineBuff_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_0_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        lineBuff_val_0_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_897 == 1'd0))) begin
        lineBuff_val_0_we0 = 1'b1;
    end else begin
        lineBuff_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuff_val_1_address0 = tmp_19_0_1_fu_618_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_906;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_1_address0 = tmp_s_fu_504_p1;
        end else begin
            lineBuff_val_1_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuff_val_1_address1 = tmp_19_0_2_fu_670_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        lineBuff_val_1_address1 = tmp_3_fu_605_p1;
    end else begin
        lineBuff_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_1_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_1_ce1 = 1'b1;
    end else begin
        lineBuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_897 == 1'd0))) begin
        lineBuff_val_1_we0 = 1'b1;
    end else begin
        lineBuff_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuff_val_2_address0 = tmp_19_0_1_fu_618_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_911;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_2_address0 = tmp_s_fu_504_p1;
        end else begin
            lineBuff_val_2_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lineBuff_val_2_address1 = tmp_19_0_2_fu_670_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        lineBuff_val_2_address1 = tmp_3_fu_605_p1;
    end else begin
        lineBuff_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        lineBuff_val_2_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        lineBuff_val_2_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_897 == 1'd0))) begin
        lineBuff_val_2_we0 = 1'b1;
    end else begin
        lineBuff_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        outStream_V_data_V_blk_n = outStream_V_data_V_full_n;
    end else begin
        outStream_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        outStream_V_data_V_din = 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1))) begin
        outStream_V_data_V_din = tmp_data_V_reg_1152;
    end else begin
        outStream_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        outStream_V_dest_V_blk_n = outStream_V_dest_V_full_n;
    end else begin
        outStream_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        outStream_V_dest_V_din = tmp_dest_V_1_reg_423;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1))) begin
        outStream_V_dest_V_din = tmp_dest_V_reg_966_pp0_iter2_reg;
    end else begin
        outStream_V_dest_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1)))) begin
        outStream_V_id_V1_update = 1'b1;
    end else begin
        outStream_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        outStream_V_id_V_blk_n = outStream_V_id_V_full_n;
    end else begin
        outStream_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        outStream_V_id_V_din = tmp_id_V_1_reg_371;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1))) begin
        outStream_V_id_V_din = tmp_id_V_reg_960_pp0_iter2_reg;
    end else begin
        outStream_V_id_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        outStream_V_keep_V_blk_n = outStream_V_keep_V_full_n;
    end else begin
        outStream_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        outStream_V_keep_V_din = tmp_keep_V_1_reg_410;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1))) begin
        outStream_V_keep_V_din = tmp_keep_V_reg_942_pp0_iter2_reg;
    end else begin
        outStream_V_keep_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        outStream_V_last_V_blk_n = outStream_V_last_V_full_n;
    end else begin
        outStream_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        outStream_V_last_V_din = 1'd1;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1))) begin
        outStream_V_last_V_din = 1'd0;
    end else begin
        outStream_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        outStream_V_strb_V_blk_n = outStream_V_strb_V_full_n;
    end else begin
        outStream_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        outStream_V_strb_V_din = tmp_strb_V_1_reg_397;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1))) begin
        outStream_V_strb_V_din = tmp_strb_V_reg_948_pp0_iter2_reg;
    end else begin
        outStream_V_strb_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        outStream_V_user_V_blk_n = outStream_V_user_V_full_n;
    end else begin
        outStream_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
        outStream_V_user_V_din = tmp_user_V_1_reg_384;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1))) begin
        outStream_V_user_V_din = tmp_user_V_reg_954_pp0_iter2_reg;
    end else begin
        outStream_V_user_V_din = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond2_fu_498_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond2_fu_498_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_847_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((inStream_V_id_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_897 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((inStream_V_id_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_897 == 1'd0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((outStream_V_id_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((outStream_V_id_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((outStream_V_id_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_state10_pp0_stage2_iter2 = ((outStream_V_id_V1_status == 1'b0) & (tmp_13_reg_938_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_state12 = ((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_847_p2 == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((inStream_V_id_V0_status == 1'b0) & (exitcond2_reg_897 == 1'd0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_319 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_916 == 1'd1) & (exitcond2_reg_897 == 1'd0));
end

always @ (*) begin
    ap_condition_337 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_cond_reg_916_pp0_iter1_reg == 1'd1) & (exitcond2_reg_897_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_assign_1_0_2_fu_625_p2 = (32'd2 + ap_phi_mux_pixConvolved_assign_phi_fu_462_p4);

assign countWait_2_fu_853_p2 = (countWait_1_reg_482 + 10'd1);

assign exitcond2_fu_498_p2 = ((ap_phi_mux_countWait_phi_fu_474_p4 == 19'd262145) ? 1'b1 : 1'b0);

assign exitcond_fu_847_p2 = ((countWait_1_reg_482 == 10'd513) ? 1'b1 : 1'b0);

assign grp_fu_859_p1 = grp_fu_859_p10;

assign grp_fu_859_p10 = reg_493;

assign grp_fu_866_p1 = grp_fu_866_p10;

assign grp_fu_866_p10 = lineBuff_val_2_load_1_reg_1092;

assign grp_fu_866_p2 = ($signed(window_val_2_1_fu_708_p0) * $signed({{1'b0}, {window_val_2_1_fu_708_p1}}));

assign grp_fu_874_p1 = grp_fu_874_p10;

assign grp_fu_874_p10 = reg_493;

assign grp_fu_881_p1 = grp_fu_881_p10;

assign grp_fu_881_p10 = lineBuff_val_1_load_3_reg_1107;

assign grp_fu_889_p1 = grp_fu_889_p10;

assign grp_fu_889_p10 = lineBuff_val_1_load_1_reg_1077;

assign icmp3_fu_536_p2 = (($signed(tmp_4_fu_526_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_520_p2 = (($signed(tmp_2_fu_510_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_638_p3 = ((tmp_12_reg_922[0:0] === 1'b1) ? idxCol_reg_928 : 32'd0);

assign idxCol_fu_554_p2 = (32'd1 + ap_phi_mux_idxCol_assign_phi_fu_451_p4);

assign idxRow_1_fu_566_p3 = ((tmp_12_fu_548_p2[0:0] === 1'b1) ? ap_phi_mux_idxRow_phi_fu_440_p4 : idxRow_2_fu_560_p2);

assign idxRow_2_fu_560_p2 = (32'd1 + ap_phi_mux_idxRow_phi_fu_440_p4);

assign inStream_V_data_V_read = inStream_V_id_V0_update;

assign inStream_V_dest_V_read = inStream_V_id_V0_update;

assign inStream_V_id_V0_status = (inStream_V_user_V_empty_n & inStream_V_strb_V_empty_n & inStream_V_last_V_empty_n & inStream_V_keep_V_empty_n & inStream_V_id_V_empty_n & inStream_V_dest_V_empty_n & inStream_V_data_V_empty_n);

assign inStream_V_id_V_read = inStream_V_id_V0_update;

assign inStream_V_keep_V_read = inStream_V_id_V0_update;

assign inStream_V_last_V_read = inStream_V_id_V0_update;

assign inStream_V_strb_V_read = inStream_V_id_V0_update;

assign inStream_V_user_V_read = inStream_V_id_V0_update;

assign lineBuff_val_0_address1 = tmp_19_0_1_fu_618_p1;

assign or_cond_fu_542_p2 = (icmp_fu_520_p2 & icmp3_fu_536_p2);

assign outStream_V_data_V_write = outStream_V_id_V1_update;

assign outStream_V_dest_V_write = outStream_V_id_V1_update;

assign outStream_V_id_V1_status = (outStream_V_user_V_full_n & outStream_V_strb_V_full_n & outStream_V_last_V_full_n & outStream_V_keep_V_full_n & outStream_V_id_V_full_n & outStream_V_dest_V_full_n & outStream_V_data_V_full_n);

assign outStream_V_id_V_write = outStream_V_id_V1_update;

assign outStream_V_keep_V_write = outStream_V_id_V1_update;

assign outStream_V_last_V_write = outStream_V_id_V1_update;

assign outStream_V_strb_V_write = outStream_V_id_V1_update;

assign outStream_V_user_V_write = outStream_V_id_V1_update;

assign p_neg_fu_780_p2 = ($signed(17'd0) - $signed(tmp_7_tr_fu_777_p1));

assign phitmp8_fu_832_p3 = ((tmp_11_fu_824_p3[0:0] === 1'b1) ? 8'd0 : tmp_10_fu_820_p1);

assign phitmp_fu_651_p2 = (countWait_reg_470 + 19'd1);

assign pixConvolved_1_fu_631_p3 = ((or_cond_reg_916[0:0] === 1'b1) ? pixConvolved_fu_612_p2 : ap_phi_mux_pixConvolved_assign_phi_fu_462_p4);

assign pixConvolved_2_fu_644_p3 = ((tmp_12_reg_922[0:0] === 1'b1) ? pixConvolved_1_fu_631_p3 : 32'd0);

assign pixConvolved_fu_612_p2 = (32'd1 + ap_phi_mux_pixConvolved_assign_phi_fu_462_p4);

assign tmp4_fu_750_p2 = ($signed(tmp1_reg_1122) + $signed(grp_fu_889_p3));

assign tmp7_fu_740_p2 = ($signed(tmp8_reg_1117) + $signed(grp_fu_881_p3));

assign tmp_10_cast_fu_809_p1 = $unsigned(tmp_8_fu_800_p1);

assign tmp_10_fu_820_p1 = valOutput_1_fu_813_p3[7:0];

assign tmp_11_fu_824_p3 = valOutput_1_fu_813_p3[32'd14];

assign tmp_12_fu_548_p2 = (($signed(ap_phi_mux_idxCol_assign_phi_fu_451_p4) < $signed(32'd511)) ? 1'b1 : 1'b0);

assign tmp_13_fu_574_p2 = ((ap_phi_mux_countWait_phi_fu_474_p4 > 19'd513) ? 1'b1 : 1'b0);

assign tmp_19_0_1_fu_618_p1 = pixConvolved_fu_612_p2;

assign tmp_19_0_2_fu_670_p1 = col_assign_1_0_2_reg_992;

assign tmp_2_fu_510_p4 = {{ap_phi_mux_idxRow_phi_fu_440_p4[31:1]}};

assign tmp_3_cast_fu_796_p1 = tmp_6_fu_786_p4;

assign tmp_3_fu_605_p1 = ap_phi_mux_pixConvolved_assign_phi_fu_462_p4;

assign tmp_4_fu_526_p4 = {{ap_phi_mux_idxCol_assign_phi_fu_451_p4[31:1]}};

assign tmp_6_fu_786_p4 = {{p_neg_fu_780_p2[16:3]}};

assign tmp_7_tr_fu_777_p1 = valOutput_reg_1137;

assign tmp_8_fu_800_p1 = $signed(tmp_7_reg_1147);

assign tmp_9_fu_803_p2 = (15'd0 - tmp_3_cast_fu_796_p1);

assign tmp_data_V_fu_840_p3 = ((or_cond_reg_916_pp0_iter2_reg[0:0] === 1'b1) ? phitmp8_fu_832_p3 : 8'd0);

assign tmp_s_fu_504_p1 = ap_phi_mux_idxCol_assign_phi_fu_451_p4;

assign valOutput_1_fu_813_p3 = ((tmp_5_reg_1142[0:0] === 1'b1) ? tmp_9_fu_803_p2 : tmp_10_cast_fu_809_p1);

assign valOutput_fu_754_p2 = (tmp7_reg_1127 + tmp4_fu_750_p2);

assign window_val_0_0_fu_664_p0 = kernel_0_read_reg_977;

assign window_val_0_0_fu_664_p1 = window_val_0_0_fu_664_p10;

assign window_val_0_0_fu_664_p10 = lineBuff_val_0_q0;

assign window_val_0_0_fu_664_p2 = ($signed(window_val_0_0_fu_664_p0) * $signed({{1'b0}, {window_val_0_0_fu_664_p1}}));

assign window_val_1_1_fu_683_p0 = kernel_4_read_reg_1017;

assign window_val_1_1_fu_683_p1 = window_val_1_1_fu_683_p10;

assign window_val_1_1_fu_683_p10 = lineBuff_val_1_q0;

assign window_val_1_1_fu_683_p2 = ($signed(window_val_1_1_fu_683_p0) * $signed({{1'b0}, {window_val_1_1_fu_683_p1}}));

assign window_val_2_1_fu_708_p0 = kernel_7_read_reg_1042;

assign window_val_2_1_fu_708_p1 = window_val_2_1_fu_708_p10;

assign window_val_2_1_fu_708_p10 = lineBuff_val_2_load_2_reg_1097;

assign window_val_2_2_fu_721_p0 = kernel_8_read_reg_1047;

assign window_val_2_2_fu_721_p1 = window_val_2_2_fu_721_p10;

assign window_val_2_2_fu_721_p10 = lineBuff_val_2_q1;

assign window_val_2_2_fu_721_p2 = ($signed(window_val_2_2_fu_721_p0) * $signed({{1'b0}, {window_val_2_2_fu_721_p1}}));

always @ (posedge ap_clk) begin
    tmp_s_reg_901[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //processImage
