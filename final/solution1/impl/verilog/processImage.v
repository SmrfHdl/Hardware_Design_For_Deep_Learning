// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="processImage,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.397000,HLS_SYN_LAT=1311240,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=762,HLS_SYN_LUT=2044,HLS_VERSION=2018_3}" *)

module processImage (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inStream_V_data_V_dout,
        inStream_V_data_V_empty_n,
        inStream_V_data_V_read,
        inStream_V_keep_V_dout,
        inStream_V_keep_V_empty_n,
        inStream_V_keep_V_read,
        inStream_V_strb_V_dout,
        inStream_V_strb_V_empty_n,
        inStream_V_strb_V_read,
        inStream_V_user_V_dout,
        inStream_V_user_V_empty_n,
        inStream_V_user_V_read,
        inStream_V_last_V_dout,
        inStream_V_last_V_empty_n,
        inStream_V_last_V_read,
        inStream_V_id_V_dout,
        inStream_V_id_V_empty_n,
        inStream_V_id_V_read,
        inStream_V_dest_V_dout,
        inStream_V_dest_V_empty_n,
        inStream_V_dest_V_read,
        outStream_V_data_V_din,
        outStream_V_data_V_full_n,
        outStream_V_data_V_write,
        outStream_V_keep_V_din,
        outStream_V_keep_V_full_n,
        outStream_V_keep_V_write,
        outStream_V_strb_V_din,
        outStream_V_strb_V_full_n,
        outStream_V_strb_V_write,
        outStream_V_user_V_din,
        outStream_V_user_V_full_n,
        outStream_V_user_V_write,
        outStream_V_last_V_din,
        outStream_V_last_V_full_n,
        outStream_V_last_V_write,
        outStream_V_id_V_din,
        outStream_V_id_V_full_n,
        outStream_V_id_V_write,
        outStream_V_dest_V_din,
        outStream_V_dest_V_full_n,
        outStream_V_dest_V_write,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1,
        operation
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_pp0_stage1 = 8'd4;
parameter    ap_ST_fsm_pp0_stage2 = 8'd8;
parameter    ap_ST_fsm_pp0_stage3 = 8'd16;
parameter    ap_ST_fsm_pp0_stage4 = 8'd32;
parameter    ap_ST_fsm_state12 = 8'd64;
parameter    ap_ST_fsm_state13 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] inStream_V_data_V_dout;
input   inStream_V_data_V_empty_n;
output   inStream_V_data_V_read;
input  [0:0] inStream_V_keep_V_dout;
input   inStream_V_keep_V_empty_n;
output   inStream_V_keep_V_read;
input  [0:0] inStream_V_strb_V_dout;
input   inStream_V_strb_V_empty_n;
output   inStream_V_strb_V_read;
input  [1:0] inStream_V_user_V_dout;
input   inStream_V_user_V_empty_n;
output   inStream_V_user_V_read;
input  [0:0] inStream_V_last_V_dout;
input   inStream_V_last_V_empty_n;
output   inStream_V_last_V_read;
input  [4:0] inStream_V_id_V_dout;
input   inStream_V_id_V_empty_n;
output   inStream_V_id_V_read;
input  [5:0] inStream_V_dest_V_dout;
input   inStream_V_dest_V_empty_n;
output   inStream_V_dest_V_read;
output  [7:0] outStream_V_data_V_din;
input   outStream_V_data_V_full_n;
output   outStream_V_data_V_write;
output  [0:0] outStream_V_keep_V_din;
input   outStream_V_keep_V_full_n;
output   outStream_V_keep_V_write;
output  [0:0] outStream_V_strb_V_din;
input   outStream_V_strb_V_full_n;
output   outStream_V_strb_V_write;
output  [1:0] outStream_V_user_V_din;
input   outStream_V_user_V_full_n;
output   outStream_V_user_V_write;
output  [0:0] outStream_V_last_V_din;
input   outStream_V_last_V_full_n;
output   outStream_V_last_V_write;
output  [4:0] outStream_V_id_V_din;
input   outStream_V_id_V_full_n;
output   outStream_V_id_V_write;
output  [5:0] outStream_V_dest_V_din;
input   outStream_V_dest_V_full_n;
output   outStream_V_dest_V_write;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [7:0] kernel_q0;
output  [3:0] kernel_address1;
output   kernel_ce1;
input  [7:0] kernel_q1;
input  [31:0] operation;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] outStream_V_data_V_din;
reg[0:0] outStream_V_keep_V_din;
reg[0:0] outStream_V_strb_V_din;
reg[1:0] outStream_V_user_V_din;
reg[0:0] outStream_V_last_V_din;
reg[4:0] outStream_V_id_V_din;
reg[5:0] outStream_V_dest_V_din;
reg[3:0] kernel_address0;
reg kernel_ce0;
reg[3:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inStream_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond2_reg_1488;
reg    inStream_V_keep_V_blk_n;
reg    inStream_V_strb_V_blk_n;
reg    inStream_V_user_V_blk_n;
reg    inStream_V_last_V_blk_n;
reg    inStream_V_id_V_blk_n;
reg    inStream_V_dest_V_blk_n;
reg    outStream_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4;
reg   [0:0] tmp_3_reg_1507;
reg   [0:0] tmp_3_reg_1507_pp0_iter1_reg;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond_fu_1416_p2;
reg    outStream_V_keep_V_blk_n;
reg    outStream_V_strb_V_blk_n;
reg    outStream_V_user_V_blk_n;
reg    outStream_V_last_V_blk_n;
reg    outStream_V_id_V_blk_n;
reg    outStream_V_dest_V_blk_n;
reg   [5:0] tmp_dest_V_1_reg_572;
reg   [4:0] tmp_id_V_1_reg_585;
reg   [1:0] tmp_user_V_1_reg_598;
reg   [0:0] tmp_strb_V_1_reg_611;
reg   [0:0] tmp_keep_V_1_reg_624;
reg   [31:0] idxCol_assign_reg_637;
reg   [31:0] idxRow_reg_649;
reg   [31:0] pixConvolved_assign_reg_661;
reg   [18:0] countWait_reg_673;
reg   [7:0] reg_696;
wire    inStream_V_id_V0_status;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] reg_700;
reg   [7:0] reg_704;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state6_pp0_stage4_iter0;
wire    outStream_V_id_V1_status;
reg    ap_block_state11_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] reg_708;
wire   [7:0] lineBuff_val_1_q0;
reg   [7:0] reg_712;
wire   [7:0] lineBuff_val_1_q1;
wire   [0:0] sel_tmp2_fu_717_p2;
reg   [0:0] sel_tmp2_reg_1473;
wire   [0:0] sel_tmp5_fu_723_p2;
reg   [0:0] sel_tmp5_reg_1478;
wire   [0:0] sel_tmp8_fu_729_p2;
reg   [0:0] sel_tmp8_reg_1483;
wire   [0:0] exitcond2_fu_735_p2;
reg   [0:0] exitcond2_reg_1488_pp0_iter1_reg;
wire   [63:0] tmp_i_fu_741_p1;
reg   [63:0] tmp_i_reg_1492;
reg   [8:0] lineBuff_val_1_addr_reg_1497;
reg   [8:0] lineBuff_val_2_addr_reg_1502;
wire   [0:0] tmp_3_fu_747_p2;
reg   [0:0] tmp_keep_V_reg_1511;
reg   [0:0] tmp_keep_V_reg_1511_pp0_iter1_reg;
reg   [0:0] tmp_strb_V_reg_1517;
reg   [0:0] tmp_strb_V_reg_1517_pp0_iter1_reg;
reg   [1:0] tmp_user_V_reg_1523;
reg   [1:0] tmp_user_V_reg_1523_pp0_iter1_reg;
reg   [4:0] tmp_id_V_reg_1529;
reg   [4:0] tmp_id_V_reg_1529_pp0_iter1_reg;
reg   [5:0] tmp_dest_V_reg_1535;
reg   [5:0] tmp_dest_V_reg_1535_pp0_iter1_reg;
wire   [31:0] pixConvolved_fu_785_p2;
reg   [31:0] pixConvolved_reg_1546;
wire   [15:0] window_val_0_0_fu_806_p2;
reg   [15:0] window_val_0_0_reg_1579;
wire   [15:0] window_val_0_1_fu_820_p2;
reg   [15:0] window_val_0_1_reg_1584;
reg   [7:0] lineBuff_val_1_load_2_reg_1594;
wire   [7:0] lineBuff_val_2_q0;
reg   [7:0] lineBuff_val_2_load_1_reg_1604;
wire   [7:0] lineBuff_val_2_q1;
reg   [7:0] lineBuff_val_2_load_2_reg_1609;
wire   [7:0] tmp_9_fu_839_p1;
reg   [7:0] tmp_9_reg_1619;
wire   [7:0] tmp_10_fu_843_p1;
reg   [7:0] tmp_10_reg_1627;
wire   [15:0] window_val_0_2_fu_855_p2;
reg   [15:0] window_val_0_2_reg_1635;
wire   [15:0] window_val_1_0_fu_869_p2;
reg   [15:0] window_val_1_0_reg_1640;
reg   [7:0] lineBuff_val_2_load_3_reg_1645;
wire   [0:0] or_cond_fu_907_p2;
reg   [0:0] or_cond_reg_1650;
wire   [15:0] tmp4_fu_913_p2;
reg   [15:0] tmp4_reg_1656;
wire   [7:0] tmp_11_fu_917_p1;
reg   [7:0] tmp_11_reg_1661;
wire   [7:0] tmp_12_fu_921_p1;
reg   [7:0] tmp_12_reg_1669;
wire   [0:0] sel_tmp3_fu_932_p2;
reg   [0:0] sel_tmp3_reg_1677;
wire   [31:0] sel_tmp4_fu_937_p3;
reg   [31:0] sel_tmp4_reg_1682;
wire   [0:0] tmp_2_fu_944_p2;
reg   [0:0] tmp_2_reg_1687;
wire   [31:0] idxCol_1_fu_956_p3;
reg   [31:0] idxCol_1_reg_1693;
wire   [18:0] phitmp_fu_964_p2;
reg   [18:0] phitmp_reg_1698;
wire   [15:0] tmp1_fu_996_p2;
reg   [15:0] tmp1_reg_1703;
wire   [7:0] valInWindow_0_minVal_2_fu_1029_p3;
reg   [7:0] valInWindow_0_minVal_2_reg_1708;
wire   [7:0] tmp_15_fu_1036_p1;
reg   [7:0] tmp_15_reg_1714;
wire   [7:0] tmp_16_fu_1040_p1;
reg   [7:0] tmp_16_reg_1722;
wire   [7:0] valInWindow_0_maxVal_2_fu_1071_p3;
reg   [7:0] valInWindow_0_maxVal_2_reg_1730;
wire   [15:0] tmp3_fu_1111_p2;
reg   [15:0] tmp3_reg_1736;
wire   [7:0] valInWindow_0_minVal_3_fu_1125_p3;
reg   [7:0] valInWindow_0_minVal_3_reg_1741;
wire   [7:0] tmp_14_fu_1132_p1;
reg   [7:0] tmp_14_reg_1747;
wire   [7:0] valInWindow_0_maxVal_3_fu_1141_p3;
reg   [7:0] valInWindow_0_maxVal_3_reg_1755;
wire   [0:0] sel_tmp6_fu_1148_p2;
reg   [0:0] sel_tmp6_reg_1761;
wire   [0:0] sel_tmp9_fu_1158_p2;
reg   [0:0] sel_tmp9_reg_1766;
wire   [31:0] pixConvolved_2_fu_1169_p3;
reg   [31:0] pixConvolved_2_reg_1771;
wire   [15:0] tmp6_fu_1194_p2;
reg   [15:0] tmp6_reg_1776;
wire   [7:0] valInWindow_0_minVal_6_fu_1226_p3;
reg   [7:0] valInWindow_0_minVal_6_reg_1781;
wire   [7:0] tmp_17_fu_1233_p1;
reg   [7:0] tmp_17_reg_1787;
wire   [7:0] valInWindow_0_maxVal_6_fu_1264_p3;
reg   [7:0] valInWindow_0_maxVal_6_reg_1795;
reg   [0:0] tmp_6_reg_1801;
reg   [12:0] tmp_4_i_reg_1806;
wire   [14:0] tmp_6_i_fu_1322_p2;
reg   [14:0] tmp_6_i_reg_1811;
wire   [31:0] idxRow_1_fu_1334_p3;
reg   [31:0] idxRow_1_reg_1816;
wire   [9:0] countWait_2_fu_1422_p2;
reg    ap_block_state13;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage4_subdone;
reg   [8:0] lineBuff_val_0_address0;
reg    lineBuff_val_0_ce0;
reg    lineBuff_val_0_we0;
wire   [7:0] lineBuff_val_0_q0;
reg   [8:0] lineBuff_val_0_address1;
reg    lineBuff_val_0_ce1;
wire   [7:0] lineBuff_val_0_q1;
reg   [8:0] lineBuff_val_1_address0;
reg    lineBuff_val_1_ce0;
reg    lineBuff_val_1_we0;
reg   [8:0] lineBuff_val_1_address1;
reg    lineBuff_val_1_ce1;
reg   [8:0] lineBuff_val_2_address0;
reg    lineBuff_val_2_ce0;
reg    lineBuff_val_2_we0;
reg   [8:0] lineBuff_val_2_address1;
reg    lineBuff_val_2_ce1;
reg   [31:0] ap_phi_mux_idxCol_assign_phi_fu_641_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_653_p4;
reg   [31:0] ap_phi_mux_pixConvolved_assign_phi_fu_665_p4;
wire    ap_block_pp0_stage2;
reg   [18:0] ap_phi_mux_countWait_phi_fu_677_p4;
reg   [9:0] countWait_1_reg_685;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_7_0_i_fu_778_p1;
wire   [63:0] tmp_7_0_1_i_fu_791_p1;
wire   [63:0] tmp_7_0_2_i_fu_832_p1;
wire    ap_block_pp0_stage3;
reg    inStream_V_id_V0_update;
reg    outStream_V_id_V1_update;
wire   [7:0] tmp_data_V_fu_1408_p3;
reg    ap_block_pp0_stage4_01001;
wire  signed [7:0] window_val_0_0_fu_806_p0;
wire   [7:0] window_val_0_0_fu_806_p1;
wire  signed [7:0] window_val_0_1_fu_820_p0;
wire   [7:0] window_val_0_1_fu_820_p1;
wire   [31:0] col_assign_0_2_i_fu_826_p2;
wire  signed [7:0] window_val_0_2_fu_855_p0;
wire   [7:0] window_val_0_2_fu_855_p1;
wire  signed [7:0] window_val_1_0_fu_869_p0;
wire   [7:0] window_val_1_0_fu_869_p1;
wire   [30:0] tmp_1_fu_875_p4;
wire   [30:0] tmp_5_fu_891_p4;
wire   [0:0] icmp_fu_885_p2;
wire   [0:0] icmp4_fu_901_p2;
wire   [31:0] sel_tmp1_fu_925_p3;
wire   [31:0] idxCol_fu_950_p2;
wire  signed [7:0] window_val_2_0_fu_977_p0;
wire   [7:0] window_val_2_0_fu_977_p1;
wire  signed [7:0] window_val_2_1_fu_990_p0;
wire   [7:0] window_val_2_1_fu_990_p1;
wire   [15:0] window_val_2_1_fu_990_p2;
wire   [15:0] window_val_2_0_fu_977_p2;
wire   [0:0] tmp_29_0_1_i_i_fu_1002_p2;
wire   [7:0] valInWindow_0_minVal_fu_1006_p3;
wire   [0:0] tmp_29_0_2_i_i_fu_1012_p2;
wire   [7:0] valInWindow_0_minVal_1_fu_1017_p3;
wire   [0:0] tmp_29_1_i_i_fu_1024_p2;
wire   [0:0] tmp_35_0_1_i_i_fu_1044_p2;
wire   [7:0] valInWindow_0_maxVal_fu_1048_p3;
wire   [0:0] tmp_35_0_2_i_i_fu_1054_p2;
wire   [7:0] valInWindow_0_maxVal_1_fu_1059_p3;
wire   [0:0] tmp_35_1_i_i_fu_1066_p2;
wire  signed [7:0] window_val_1_1_fu_1085_p0;
wire   [7:0] window_val_1_1_fu_1085_p1;
wire  signed [7:0] window_val_1_2_fu_1099_p0;
wire   [7:0] window_val_1_2_fu_1099_p1;
wire   [15:0] window_val_1_1_fu_1085_p2;
wire   [15:0] window_val_1_2_fu_1099_p2;
wire   [15:0] tmp2_fu_1105_p2;
wire   [7:0] tmp_13_fu_1116_p1;
wire   [0:0] tmp_29_1_1_i_i_fu_1120_p2;
wire   [0:0] tmp_35_1_1_i_i_fu_1136_p2;
wire   [31:0] sel_tmp7_fu_1152_p3;
wire   [31:0] pixConvolved_1_fu_1162_p3;
wire  signed [7:0] window_val_2_2_fu_1183_p0;
wire   [7:0] window_val_2_2_fu_1183_p1;
wire   [15:0] window_val_2_2_fu_1183_p2;
wire   [15:0] tmp5_fu_1189_p2;
wire   [0:0] tmp_29_1_2_i_i_fu_1199_p2;
wire   [7:0] valInWindow_0_minVal_4_fu_1203_p3;
wire   [0:0] tmp_29_2_i_i_fu_1209_p2;
wire   [7:0] valInWindow_0_minVal_5_fu_1214_p3;
wire   [0:0] tmp_29_2_1_i_i_fu_1221_p2;
wire   [0:0] tmp_35_1_2_i_i_fu_1237_p2;
wire   [7:0] valInWindow_0_maxVal_4_fu_1241_p3;
wire   [0:0] tmp_35_2_i_i_fu_1247_p2;
wire   [7:0] valInWindow_0_maxVal_5_fu_1252_p3;
wire   [0:0] tmp_35_2_1_i_i_fu_1259_p2;
wire   [15:0] tmp7_fu_1271_p2;
wire  signed [15:0] valOutput_fu_1275_p2;
wire  signed [16:0] tmp_tr_i_fu_1280_p1;
wire   [16:0] p_neg_i_fu_1292_p2;
wire   [13:0] tmp_4_fu_1298_p4;
wire   [14:0] tmp_2_i_cast_fu_1308_p1;
wire   [31:0] idxRow_2_fu_1328_p2;
wire  signed [13:0] tmp_5_i_fu_1341_p1;
wire   [14:0] tmp_7_i_cast_fu_1344_p1;
wire   [14:0] valOutput_1_fu_1348_p3;
wire   [0:0] tmp_8_fu_1358_p3;
wire   [7:0] tmp_7_fu_1354_p1;
wire   [0:0] tmp_29_2_2_i_i_fu_1374_p2;
wire   [0:0] tmp_35_2_2_i_i_fu_1384_p2;
wire   [7:0] p_i_fu_1366_p3;
wire   [7:0] valInWindow_0_minVal_7_fu_1378_p3;
wire   [7:0] sel_tmp_fu_1394_p3;
wire   [7:0] valInWindow_0_maxVal_7_fu_1388_p3;
wire   [7:0] sel_tmp10_fu_1401_p3;
reg   [7:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] window_val_0_0_fu_806_p10;
wire   [15:0] window_val_0_1_fu_820_p10;
wire   [15:0] window_val_0_2_fu_855_p10;
wire   [15:0] window_val_1_0_fu_869_p10;
wire   [15:0] window_val_1_1_fu_1085_p10;
wire   [15:0] window_val_1_2_fu_1099_p10;
wire   [15:0] window_val_2_0_fu_977_p10;
wire   [15:0] window_val_2_1_fu_990_p10;
wire   [15:0] window_val_2_2_fu_1183_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

processImage_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_0_address0),
    .ce0(lineBuff_val_0_ce0),
    .we0(lineBuff_val_0_we0),
    .d0(lineBuff_val_1_q0),
    .q0(lineBuff_val_0_q0),
    .address1(lineBuff_val_0_address1),
    .ce1(lineBuff_val_0_ce1),
    .q1(lineBuff_val_0_q1)
);

processImage_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_1_address0),
    .ce0(lineBuff_val_1_ce0),
    .we0(lineBuff_val_1_we0),
    .d0(lineBuff_val_2_q0),
    .q0(lineBuff_val_1_q0),
    .address1(lineBuff_val_1_address1),
    .ce1(lineBuff_val_1_ce1),
    .q1(lineBuff_val_1_q1)
);

processImage_linebkb #(
    .DataWidth( 8 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
lineBuff_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lineBuff_val_2_address0),
    .ce0(lineBuff_val_2_ce0),
    .we0(lineBuff_val_2_we0),
    .d0(inStream_V_data_V_dout),
    .q0(lineBuff_val_2_q0),
    .address1(lineBuff_val_2_address1),
    .ce1(lineBuff_val_2_ce1),
    .q1(lineBuff_val_2_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        countWait_1_reg_685 <= 10'd0;
    end else if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        countWait_1_reg_685 <= countWait_2_fu_1422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1488 == 1'd0))) begin
        countWait_reg_673 <= phitmp_reg_1698;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        countWait_reg_673 <= 19'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1488 == 1'd0))) begin
        idxCol_assign_reg_637 <= idxCol_1_reg_1693;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idxCol_assign_reg_637 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        idxRow_reg_649 <= idxRow_1_reg_1816;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idxRow_reg_649 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        pixConvolved_assign_reg_661 <= pixConvolved_2_reg_1771;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pixConvolved_assign_reg_661 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0))) begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            reg_712 <= lineBuff_val_1_q1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            reg_712 <= lineBuff_val_1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_1488 <= exitcond2_fu_735_p2;
        exitcond2_reg_1488_pp0_iter1_reg <= exitcond2_reg_1488;
        tmp_3_reg_1507_pp0_iter1_reg <= tmp_3_reg_1507;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0))) begin
        idxCol_1_reg_1693 <= idxCol_1_fu_956_p3;
        lineBuff_val_2_load_3_reg_1645 <= lineBuff_val_2_q1;
        phitmp_reg_1698 <= phitmp_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        idxRow_1_reg_1816 <= idxRow_1_fu_1334_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_735_p2 == 1'd0))) begin
        lineBuff_val_1_addr_reg_1497 <= tmp_i_fu_741_p1;
        lineBuff_val_2_addr_reg_1502 <= tmp_i_fu_741_p1;
        tmp_3_reg_1507 <= tmp_3_fu_747_p2;
        tmp_i_reg_1492[31 : 0] <= tmp_i_fu_741_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond2_reg_1488 == 1'd0))) begin
        lineBuff_val_1_load_2_reg_1594 <= lineBuff_val_1_q1;
        lineBuff_val_2_load_1_reg_1604 <= lineBuff_val_2_q0;
        lineBuff_val_2_load_2_reg_1609 <= lineBuff_val_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond2_reg_1488 == 1'd0))) begin
        or_cond_reg_1650 <= or_cond_fu_907_p2;
        sel_tmp3_reg_1677 <= sel_tmp3_fu_932_p2;
        sel_tmp4_reg_1682 <= sel_tmp4_fu_937_p3;
        tmp4_reg_1656 <= tmp4_fu_913_p2;
        tmp_11_reg_1661 <= tmp_11_fu_917_p1;
        tmp_12_reg_1669 <= tmp_12_fu_921_p1;
        tmp_2_reg_1687 <= tmp_2_fu_944_p2;
        window_val_0_2_reg_1635 <= window_val_0_2_fu_855_p2;
        window_val_1_0_reg_1640 <= window_val_1_0_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        pixConvolved_2_reg_1771 <= pixConvolved_2_fu_1169_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond2_reg_1488 == 1'd0))) begin
        pixConvolved_reg_1546 <= pixConvolved_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond2_reg_1488 == 1'd0)))) begin
        reg_696 <= kernel_q0;
        reg_700 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1488 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0)))) begin
        reg_704 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0)))) begin
        reg_708 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sel_tmp2_reg_1473 <= sel_tmp2_fu_717_p2;
        sel_tmp5_reg_1478 <= sel_tmp5_fu_723_p2;
        sel_tmp8_reg_1483 <= sel_tmp8_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        sel_tmp6_reg_1761 <= sel_tmp6_fu_1148_p2;
        sel_tmp9_reg_1766 <= sel_tmp9_fu_1158_p2;
        tmp_14_reg_1747 <= tmp_14_fu_1132_p1;
        valInWindow_0_maxVal_3_reg_1755 <= valInWindow_0_maxVal_3_fu_1141_p3;
        valInWindow_0_minVal_3_reg_1741 <= valInWindow_0_minVal_3_fu_1125_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (sel_tmp3_reg_1677 == 1'd1) & (exitcond2_reg_1488 == 1'd0))) begin
        tmp1_reg_1703 <= tmp1_fu_996_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (sel_tmp3_reg_1677 == 1'd1) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        tmp3_reg_1736 <= tmp3_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (sel_tmp3_reg_1677 == 1'd1) & (sel_tmp9_reg_1766 == 1'd0) & (sel_tmp6_reg_1761 == 1'd0) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        tmp6_reg_1776 <= tmp6_fu_1194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (exitcond2_reg_1488 == 1'd0))) begin
        tmp_10_reg_1627 <= tmp_10_fu_843_p1;
        tmp_9_reg_1619 <= tmp_9_fu_839_p1;
        window_val_0_0_reg_1579 <= window_val_0_0_fu_806_p2;
        window_val_0_1_reg_1584 <= window_val_0_1_fu_820_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1488 == 1'd0))) begin
        tmp_15_reg_1714 <= tmp_15_fu_1036_p1;
        tmp_16_reg_1722 <= tmp_16_fu_1040_p1;
        valInWindow_0_maxVal_2_reg_1730 <= valInWindow_0_maxVal_2_fu_1071_p3;
        valInWindow_0_minVal_2_reg_1708 <= valInWindow_0_minVal_2_fu_1029_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        tmp_17_reg_1787 <= tmp_17_fu_1233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (sel_tmp3_reg_1677 == 1'd1) & (sel_tmp9_reg_1766 == 1'd0) & (sel_tmp6_reg_1761 == 1'd0) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        tmp_4_i_reg_1806 <= {{valOutput_fu_1275_p2[15:3]}};
        tmp_6_i_reg_1811 <= tmp_6_i_fu_1322_p2;
        tmp_6_reg_1801 <= valOutput_fu_1275_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        tmp_dest_V_1_reg_572 <= tmp_dest_V_reg_1535_pp0_iter1_reg;
        tmp_id_V_1_reg_585 <= tmp_id_V_reg_1529_pp0_iter1_reg;
        tmp_keep_V_1_reg_624 <= tmp_keep_V_reg_1511_pp0_iter1_reg;
        tmp_strb_V_1_reg_611 <= tmp_strb_V_reg_1517_pp0_iter1_reg;
        tmp_user_V_1_reg_598 <= tmp_user_V_reg_1523_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488 == 1'd0))) begin
        tmp_dest_V_reg_1535 <= inStream_V_dest_V_dout;
        tmp_id_V_reg_1529 <= inStream_V_id_V_dout;
        tmp_keep_V_reg_1511 <= inStream_V_keep_V_dout;
        tmp_strb_V_reg_1517 <= inStream_V_strb_V_dout;
        tmp_user_V_reg_1523 <= inStream_V_user_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_dest_V_reg_1535_pp0_iter1_reg <= tmp_dest_V_reg_1535;
        tmp_id_V_reg_1529_pp0_iter1_reg <= tmp_id_V_reg_1529;
        tmp_keep_V_reg_1511_pp0_iter1_reg <= tmp_keep_V_reg_1511;
        tmp_strb_V_reg_1517_pp0_iter1_reg <= tmp_strb_V_reg_1517;
        tmp_user_V_reg_1523_pp0_iter1_reg <= tmp_user_V_reg_1523;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (sel_tmp9_reg_1766 == 1'd1) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        valInWindow_0_maxVal_6_reg_1795 <= valInWindow_0_maxVal_6_fu_1264_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (sel_tmp6_reg_1761 == 1'd1) & (sel_tmp9_reg_1766 == 1'd0) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        valInWindow_0_minVal_6_reg_1781 <= valInWindow_0_minVal_6_fu_1226_p3;
    end
end

always @ (*) begin
    if ((exitcond2_fu_735_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1488 == 1'd0))) begin
        ap_phi_mux_countWait_phi_fu_677_p4 = phitmp_reg_1698;
    end else begin
        ap_phi_mux_countWait_phi_fu_677_p4 = countWait_reg_673;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1488 == 1'd0))) begin
        ap_phi_mux_idxCol_assign_phi_fu_641_p4 = idxCol_1_reg_1693;
    end else begin
        ap_phi_mux_idxCol_assign_phi_fu_641_p4 = idxCol_assign_reg_637;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_idxRow_phi_fu_653_p4 = idxRow_1_reg_1816;
    end else begin
        ap_phi_mux_idxRow_phi_fu_653_p4 = idxRow_reg_649;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_1488_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_pixConvolved_assign_phi_fu_665_p4 = pixConvolved_2_reg_1771;
    end else begin
        ap_phi_mux_pixConvolved_assign_phi_fu_665_p4 = pixConvolved_assign_reg_661;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_data_V_blk_n = inStream_V_data_V_empty_n;
    end else begin
        inStream_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_dest_V_blk_n = inStream_V_dest_V_empty_n;
    end else begin
        inStream_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488 == 1'd0))) begin
        inStream_V_id_V0_update = 1'b1;
    end else begin
        inStream_V_id_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_id_V_blk_n = inStream_V_id_V_empty_n;
    end else begin
        inStream_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_keep_V_blk_n = inStream_V_keep_V_empty_n;
    end else begin
        inStream_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_last_V_blk_n = inStream_V_last_V_empty_n;
    end else begin
        inStream_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_strb_V_blk_n = inStream_V_strb_V_empty_n;
    end else begin
        inStream_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        inStream_V_user_V_blk_n = inStream_V_user_V_empty_n;
    end else begin
        inStream_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            kernel_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address0 = 64'd4;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            kernel_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = 64'd0;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address1 = 64'd5;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            kernel_address1 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address1 = 64'd1;
        end else begin
            kernel_address1 = 'bx;
        end
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_0_address0 = tmp_7_0_i_fu_778_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_0_address0 = tmp_i_reg_1492;
        end else begin
            lineBuff_val_0_address0 = 'bx;
        end
    end else begin
        lineBuff_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            lineBuff_val_0_address1 = tmp_7_0_2_i_fu_832_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_0_address1 = tmp_7_0_1_i_fu_791_p1;
        end else begin
            lineBuff_val_0_address1 = 'bx;
        end
    end else begin
        lineBuff_val_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        lineBuff_val_0_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        lineBuff_val_0_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488 == 1'd0))) begin
        lineBuff_val_0_we0 = 1'b1;
    end else begin
        lineBuff_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_1_address0 = tmp_7_0_i_fu_778_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_1497;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_1_address0 = tmp_i_fu_741_p1;
        end else begin
            lineBuff_val_1_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            lineBuff_val_1_address1 = tmp_7_0_2_i_fu_832_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_1_address1 = tmp_7_0_1_i_fu_791_p1;
        end else begin
            lineBuff_val_1_address1 = 'bx;
        end
    end else begin
        lineBuff_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        lineBuff_val_1_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        lineBuff_val_1_ce1 = 1'b1;
    end else begin
        lineBuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488 == 1'd0))) begin
        lineBuff_val_1_we0 = 1'b1;
    end else begin
        lineBuff_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_address0 = tmp_7_0_i_fu_778_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_1502;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lineBuff_val_2_address0 = tmp_i_fu_741_p1;
        end else begin
            lineBuff_val_2_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            lineBuff_val_2_address1 = tmp_7_0_2_i_fu_832_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            lineBuff_val_2_address1 = tmp_7_0_1_i_fu_791_p1;
        end else begin
            lineBuff_val_2_address1 = 'bx;
        end
    end else begin
        lineBuff_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        lineBuff_val_2_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        lineBuff_val_2_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_1488 == 1'd0))) begin
        lineBuff_val_2_we0 = 1'b1;
    end else begin
        lineBuff_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4)))) begin
        outStream_V_data_V_blk_n = outStream_V_data_V_full_n;
    end else begin
        outStream_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        outStream_V_data_V_din = 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1))) begin
        outStream_V_data_V_din = tmp_data_V_fu_1408_p3;
    end else begin
        outStream_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4)))) begin
        outStream_V_dest_V_blk_n = outStream_V_dest_V_full_n;
    end else begin
        outStream_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        outStream_V_dest_V_din = tmp_dest_V_1_reg_572;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1))) begin
        outStream_V_dest_V_din = tmp_dest_V_reg_1535_pp0_iter1_reg;
    end else begin
        outStream_V_dest_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1)))) begin
        outStream_V_id_V1_update = 1'b1;
    end else begin
        outStream_V_id_V1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4)))) begin
        outStream_V_id_V_blk_n = outStream_V_id_V_full_n;
    end else begin
        outStream_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        outStream_V_id_V_din = tmp_id_V_1_reg_585;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1))) begin
        outStream_V_id_V_din = tmp_id_V_reg_1529_pp0_iter1_reg;
    end else begin
        outStream_V_id_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4)))) begin
        outStream_V_keep_V_blk_n = outStream_V_keep_V_full_n;
    end else begin
        outStream_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        outStream_V_keep_V_din = tmp_keep_V_1_reg_624;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1))) begin
        outStream_V_keep_V_din = tmp_keep_V_reg_1511_pp0_iter1_reg;
    end else begin
        outStream_V_keep_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4)))) begin
        outStream_V_last_V_blk_n = outStream_V_last_V_full_n;
    end else begin
        outStream_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        outStream_V_last_V_din = 1'd1;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1))) begin
        outStream_V_last_V_din = 1'd0;
    end else begin
        outStream_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4)))) begin
        outStream_V_strb_V_blk_n = outStream_V_strb_V_full_n;
    end else begin
        outStream_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        outStream_V_strb_V_din = tmp_strb_V_1_reg_611;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1))) begin
        outStream_V_strb_V_din = tmp_strb_V_reg_1517_pp0_iter1_reg;
    end else begin
        outStream_V_strb_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage4)))) begin
        outStream_V_user_V_blk_n = outStream_V_user_V_full_n;
    end else begin
        outStream_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
        outStream_V_user_V_din = tmp_user_V_1_reg_598;
    end else if (((1'b0 == ap_block_pp0_stage4_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1))) begin
        outStream_V_user_V_din = tmp_user_V_reg_1523_pp0_iter1_reg;
    end else begin
        outStream_V_user_V_din = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_fu_735_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_fu_735_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (exitcond_fu_1416_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((inStream_V_id_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((inStream_V_id_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_reg_1488 == 1'd0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((outStream_V_id_V1_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((outStream_V_id_V1_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((outStream_V_id_V1_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage4_iter1 = ((outStream_V_id_V1_status == 1'b0) & (tmp_3_reg_1507_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_block_state13 = ((outStream_V_id_V1_status == 1'b0) & (exitcond_fu_1416_p2 == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((inStream_V_id_V0_status == 1'b0) & (exitcond2_reg_1488 == 1'd0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_assign_0_2_i_fu_826_p2 = (32'd2 + pixConvolved_assign_reg_661);

assign countWait_2_fu_1422_p2 = (countWait_1_reg_685 + 10'd1);

assign exitcond2_fu_735_p2 = ((ap_phi_mux_countWait_phi_fu_677_p4 == 19'd262145) ? 1'b1 : 1'b0);

assign exitcond_fu_1416_p2 = ((countWait_1_reg_685 == 10'd513) ? 1'b1 : 1'b0);

assign icmp4_fu_901_p2 = (($signed(tmp_5_fu_891_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_885_p2 = (($signed(tmp_1_fu_875_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_956_p3 = ((tmp_2_fu_944_p2[0:0] === 1'b1) ? idxCol_fu_950_p2 : 32'd0);

assign idxCol_fu_950_p2 = (32'd1 + idxCol_assign_reg_637);

assign idxRow_1_fu_1334_p3 = ((tmp_2_reg_1687[0:0] === 1'b1) ? idxRow_reg_649 : idxRow_2_fu_1328_p2);

assign idxRow_2_fu_1328_p2 = (32'd1 + idxRow_reg_649);

assign inStream_V_data_V_read = inStream_V_id_V0_update;

assign inStream_V_dest_V_read = inStream_V_id_V0_update;

assign inStream_V_id_V0_status = (inStream_V_user_V_empty_n & inStream_V_strb_V_empty_n & inStream_V_last_V_empty_n & inStream_V_keep_V_empty_n & inStream_V_id_V_empty_n & inStream_V_dest_V_empty_n & inStream_V_data_V_empty_n);

assign inStream_V_id_V_read = inStream_V_id_V0_update;

assign inStream_V_keep_V_read = inStream_V_id_V0_update;

assign inStream_V_last_V_read = inStream_V_id_V0_update;

assign inStream_V_strb_V_read = inStream_V_id_V0_update;

assign inStream_V_user_V_read = inStream_V_id_V0_update;

assign or_cond_fu_907_p2 = (icmp_fu_885_p2 & icmp4_fu_901_p2);

assign outStream_V_data_V_write = outStream_V_id_V1_update;

assign outStream_V_dest_V_write = outStream_V_id_V1_update;

assign outStream_V_id_V1_status = (outStream_V_user_V_full_n & outStream_V_strb_V_full_n & outStream_V_last_V_full_n & outStream_V_keep_V_full_n & outStream_V_id_V_full_n & outStream_V_dest_V_full_n & outStream_V_data_V_full_n);

assign outStream_V_id_V_write = outStream_V_id_V1_update;

assign outStream_V_keep_V_write = outStream_V_id_V1_update;

assign outStream_V_last_V_write = outStream_V_id_V1_update;

assign outStream_V_strb_V_write = outStream_V_id_V1_update;

assign outStream_V_user_V_write = outStream_V_id_V1_update;

assign p_i_fu_1366_p3 = ((tmp_8_fu_1358_p3[0:0] === 1'b1) ? 8'd0 : tmp_7_fu_1354_p1);

assign p_neg_i_fu_1292_p2 = ($signed(17'd0) - $signed(tmp_tr_i_fu_1280_p1));

assign phitmp_fu_964_p2 = (countWait_reg_673 + 19'd1);

assign pixConvolved_1_fu_1162_p3 = ((sel_tmp9_fu_1158_p2[0:0] === 1'b1) ? pixConvolved_reg_1546 : sel_tmp7_fu_1152_p3);

assign pixConvolved_2_fu_1169_p3 = ((tmp_2_reg_1687[0:0] === 1'b1) ? pixConvolved_1_fu_1162_p3 : 32'd0);

assign pixConvolved_fu_785_p2 = (32'd1 + ap_phi_mux_pixConvolved_assign_phi_fu_665_p4);

assign sel_tmp10_fu_1401_p3 = ((sel_tmp6_reg_1761[0:0] === 1'b1) ? valInWindow_0_minVal_7_fu_1378_p3 : sel_tmp_fu_1394_p3);

assign sel_tmp1_fu_925_p3 = ((or_cond_fu_907_p2[0:0] === 1'b1) ? pixConvolved_reg_1546 : pixConvolved_assign_reg_661);

assign sel_tmp2_fu_717_p2 = ((operation == 32'd0) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_932_p2 = (sel_tmp2_reg_1473 & or_cond_fu_907_p2);

assign sel_tmp4_fu_937_p3 = ((sel_tmp3_fu_932_p2[0:0] === 1'b1) ? pixConvolved_reg_1546 : sel_tmp1_fu_925_p3);

assign sel_tmp5_fu_723_p2 = ((operation == 32'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_1148_p2 = (sel_tmp5_reg_1478 & or_cond_reg_1650);

assign sel_tmp7_fu_1152_p3 = ((sel_tmp6_fu_1148_p2[0:0] === 1'b1) ? pixConvolved_reg_1546 : sel_tmp4_reg_1682);

assign sel_tmp8_fu_729_p2 = ((operation == 32'd2) ? 1'b1 : 1'b0);

assign sel_tmp9_fu_1158_p2 = (sel_tmp8_reg_1483 & or_cond_reg_1650);

assign sel_tmp_fu_1394_p3 = ((sel_tmp3_reg_1677[0:0] === 1'b1) ? p_i_fu_1366_p3 : 8'd0);

assign tmp1_fu_996_p2 = (window_val_2_1_fu_990_p2 + window_val_2_0_fu_977_p2);

assign tmp2_fu_1105_p2 = (window_val_1_1_fu_1085_p2 + window_val_1_2_fu_1099_p2);

assign tmp3_fu_1111_p2 = (tmp1_reg_1703 + tmp2_fu_1105_p2);

assign tmp4_fu_913_p2 = (window_val_0_0_reg_1579 + window_val_0_1_reg_1584);

assign tmp5_fu_1189_p2 = (window_val_2_2_fu_1183_p2 + window_val_0_2_reg_1635);

assign tmp6_fu_1194_p2 = (window_val_1_0_reg_1640 + tmp5_fu_1189_p2);

assign tmp7_fu_1271_p2 = (tmp4_reg_1656 + tmp6_reg_1776);

assign tmp_10_fu_843_p1 = window_val_0_1_fu_820_p2[7:0];

assign tmp_11_fu_917_p1 = window_val_0_2_fu_855_p2[7:0];

assign tmp_12_fu_921_p1 = window_val_1_0_fu_869_p2[7:0];

assign tmp_13_fu_1116_p1 = window_val_1_1_fu_1085_p2[7:0];

assign tmp_14_fu_1132_p1 = window_val_1_2_fu_1099_p2[7:0];

assign tmp_15_fu_1036_p1 = window_val_2_0_fu_977_p2[7:0];

assign tmp_16_fu_1040_p1 = window_val_2_1_fu_990_p2[7:0];

assign tmp_17_fu_1233_p1 = window_val_2_2_fu_1183_p2[7:0];

assign tmp_1_fu_875_p4 = {{ap_phi_mux_idxRow_phi_fu_653_p4[31:1]}};

assign tmp_29_0_1_i_i_fu_1002_p2 = ((tmp_10_reg_1627 < tmp_9_reg_1619) ? 1'b1 : 1'b0);

assign tmp_29_0_2_i_i_fu_1012_p2 = ((tmp_11_reg_1661 < valInWindow_0_minVal_fu_1006_p3) ? 1'b1 : 1'b0);

assign tmp_29_1_1_i_i_fu_1120_p2 = ((tmp_13_fu_1116_p1 < valInWindow_0_minVal_2_reg_1708) ? 1'b1 : 1'b0);

assign tmp_29_1_2_i_i_fu_1199_p2 = ((tmp_14_reg_1747 < valInWindow_0_minVal_3_reg_1741) ? 1'b1 : 1'b0);

assign tmp_29_1_i_i_fu_1024_p2 = ((tmp_12_reg_1669 < valInWindow_0_minVal_1_fu_1017_p3) ? 1'b1 : 1'b0);

assign tmp_29_2_1_i_i_fu_1221_p2 = ((tmp_16_reg_1722 < valInWindow_0_minVal_5_fu_1214_p3) ? 1'b1 : 1'b0);

assign tmp_29_2_2_i_i_fu_1374_p2 = ((tmp_17_reg_1787 < valInWindow_0_minVal_6_reg_1781) ? 1'b1 : 1'b0);

assign tmp_29_2_i_i_fu_1209_p2 = ((tmp_15_reg_1714 < valInWindow_0_minVal_4_fu_1203_p3) ? 1'b1 : 1'b0);

assign tmp_2_fu_944_p2 = (($signed(idxCol_assign_reg_637) < $signed(32'd511)) ? 1'b1 : 1'b0);

assign tmp_2_i_cast_fu_1308_p1 = tmp_4_fu_1298_p4;

assign tmp_35_0_1_i_i_fu_1044_p2 = ((tmp_10_reg_1627 > tmp_9_reg_1619) ? 1'b1 : 1'b0);

assign tmp_35_0_2_i_i_fu_1054_p2 = ((tmp_11_reg_1661 > valInWindow_0_maxVal_fu_1048_p3) ? 1'b1 : 1'b0);

assign tmp_35_1_1_i_i_fu_1136_p2 = ((tmp_13_fu_1116_p1 > valInWindow_0_maxVal_2_reg_1730) ? 1'b1 : 1'b0);

assign tmp_35_1_2_i_i_fu_1237_p2 = ((tmp_14_reg_1747 > valInWindow_0_maxVal_3_reg_1755) ? 1'b1 : 1'b0);

assign tmp_35_1_i_i_fu_1066_p2 = ((tmp_12_reg_1669 > valInWindow_0_maxVal_1_fu_1059_p3) ? 1'b1 : 1'b0);

assign tmp_35_2_1_i_i_fu_1259_p2 = ((tmp_16_reg_1722 > valInWindow_0_maxVal_5_fu_1252_p3) ? 1'b1 : 1'b0);

assign tmp_35_2_2_i_i_fu_1384_p2 = ((tmp_17_reg_1787 > valInWindow_0_maxVal_6_reg_1795) ? 1'b1 : 1'b0);

assign tmp_35_2_i_i_fu_1247_p2 = ((tmp_15_reg_1714 > valInWindow_0_maxVal_4_fu_1241_p3) ? 1'b1 : 1'b0);

assign tmp_3_fu_747_p2 = ((ap_phi_mux_countWait_phi_fu_677_p4 > 19'd513) ? 1'b1 : 1'b0);

assign tmp_4_fu_1298_p4 = {{p_neg_i_fu_1292_p2[16:3]}};

assign tmp_5_fu_891_p4 = {{idxCol_assign_reg_637[31:1]}};

assign tmp_5_i_fu_1341_p1 = $signed(tmp_4_i_reg_1806);

assign tmp_6_i_fu_1322_p2 = (15'd0 - tmp_2_i_cast_fu_1308_p1);

assign tmp_7_0_1_i_fu_791_p1 = pixConvolved_fu_785_p2;

assign tmp_7_0_2_i_fu_832_p1 = col_assign_0_2_i_fu_826_p2;

assign tmp_7_0_i_fu_778_p1 = ap_phi_mux_pixConvolved_assign_phi_fu_665_p4;

assign tmp_7_fu_1354_p1 = valOutput_1_fu_1348_p3[7:0];

assign tmp_7_i_cast_fu_1344_p1 = $unsigned(tmp_5_i_fu_1341_p1);

assign tmp_8_fu_1358_p3 = valOutput_1_fu_1348_p3[32'd14];

assign tmp_9_fu_839_p1 = window_val_0_0_fu_806_p2[7:0];

assign tmp_data_V_fu_1408_p3 = ((sel_tmp9_reg_1766[0:0] === 1'b1) ? valInWindow_0_maxVal_7_fu_1388_p3 : sel_tmp10_fu_1401_p3);

assign tmp_i_fu_741_p1 = ap_phi_mux_idxCol_assign_phi_fu_641_p4;

assign tmp_tr_i_fu_1280_p1 = valOutput_fu_1275_p2;

assign valInWindow_0_maxVal_1_fu_1059_p3 = ((tmp_35_0_2_i_i_fu_1054_p2[0:0] === 1'b1) ? tmp_11_reg_1661 : valInWindow_0_maxVal_fu_1048_p3);

assign valInWindow_0_maxVal_2_fu_1071_p3 = ((tmp_35_1_i_i_fu_1066_p2[0:0] === 1'b1) ? tmp_12_reg_1669 : valInWindow_0_maxVal_1_fu_1059_p3);

assign valInWindow_0_maxVal_3_fu_1141_p3 = ((tmp_35_1_1_i_i_fu_1136_p2[0:0] === 1'b1) ? tmp_13_fu_1116_p1 : valInWindow_0_maxVal_2_reg_1730);

assign valInWindow_0_maxVal_4_fu_1241_p3 = ((tmp_35_1_2_i_i_fu_1237_p2[0:0] === 1'b1) ? tmp_14_reg_1747 : valInWindow_0_maxVal_3_reg_1755);

assign valInWindow_0_maxVal_5_fu_1252_p3 = ((tmp_35_2_i_i_fu_1247_p2[0:0] === 1'b1) ? tmp_15_reg_1714 : valInWindow_0_maxVal_4_fu_1241_p3);

assign valInWindow_0_maxVal_6_fu_1264_p3 = ((tmp_35_2_1_i_i_fu_1259_p2[0:0] === 1'b1) ? tmp_16_reg_1722 : valInWindow_0_maxVal_5_fu_1252_p3);

assign valInWindow_0_maxVal_7_fu_1388_p3 = ((tmp_35_2_2_i_i_fu_1384_p2[0:0] === 1'b1) ? tmp_17_reg_1787 : valInWindow_0_maxVal_6_reg_1795);

assign valInWindow_0_maxVal_fu_1048_p3 = ((tmp_35_0_1_i_i_fu_1044_p2[0:0] === 1'b1) ? tmp_10_reg_1627 : tmp_9_reg_1619);

assign valInWindow_0_minVal_1_fu_1017_p3 = ((tmp_29_0_2_i_i_fu_1012_p2[0:0] === 1'b1) ? tmp_11_reg_1661 : valInWindow_0_minVal_fu_1006_p3);

assign valInWindow_0_minVal_2_fu_1029_p3 = ((tmp_29_1_i_i_fu_1024_p2[0:0] === 1'b1) ? tmp_12_reg_1669 : valInWindow_0_minVal_1_fu_1017_p3);

assign valInWindow_0_minVal_3_fu_1125_p3 = ((tmp_29_1_1_i_i_fu_1120_p2[0:0] === 1'b1) ? tmp_13_fu_1116_p1 : valInWindow_0_minVal_2_reg_1708);

assign valInWindow_0_minVal_4_fu_1203_p3 = ((tmp_29_1_2_i_i_fu_1199_p2[0:0] === 1'b1) ? tmp_14_reg_1747 : valInWindow_0_minVal_3_reg_1741);

assign valInWindow_0_minVal_5_fu_1214_p3 = ((tmp_29_2_i_i_fu_1209_p2[0:0] === 1'b1) ? tmp_15_reg_1714 : valInWindow_0_minVal_4_fu_1203_p3);

assign valInWindow_0_minVal_6_fu_1226_p3 = ((tmp_29_2_1_i_i_fu_1221_p2[0:0] === 1'b1) ? tmp_16_reg_1722 : valInWindow_0_minVal_5_fu_1214_p3);

assign valInWindow_0_minVal_7_fu_1378_p3 = ((tmp_29_2_2_i_i_fu_1374_p2[0:0] === 1'b1) ? tmp_17_reg_1787 : valInWindow_0_minVal_6_reg_1781);

assign valInWindow_0_minVal_fu_1006_p3 = ((tmp_29_0_1_i_i_fu_1002_p2[0:0] === 1'b1) ? tmp_10_reg_1627 : tmp_9_reg_1619);

assign valOutput_1_fu_1348_p3 = ((tmp_6_reg_1801[0:0] === 1'b1) ? tmp_6_i_reg_1811 : tmp_7_i_cast_fu_1344_p1);

assign valOutput_fu_1275_p2 = (tmp3_reg_1736 + tmp7_fu_1271_p2);

assign window_val_0_0_fu_806_p0 = reg_696;

assign window_val_0_0_fu_806_p1 = window_val_0_0_fu_806_p10;

assign window_val_0_0_fu_806_p10 = lineBuff_val_0_q0;

assign window_val_0_0_fu_806_p2 = ($signed(window_val_0_0_fu_806_p0) * $signed({{1'b0}, {window_val_0_0_fu_806_p1}}));

assign window_val_0_1_fu_820_p0 = reg_700;

assign window_val_0_1_fu_820_p1 = window_val_0_1_fu_820_p10;

assign window_val_0_1_fu_820_p10 = lineBuff_val_0_q1;

assign window_val_0_1_fu_820_p2 = ($signed(window_val_0_1_fu_820_p0) * $signed({{1'b0}, {window_val_0_1_fu_820_p1}}));

assign window_val_0_2_fu_855_p0 = reg_704;

assign window_val_0_2_fu_855_p1 = window_val_0_2_fu_855_p10;

assign window_val_0_2_fu_855_p10 = lineBuff_val_0_q1;

assign window_val_0_2_fu_855_p2 = ($signed(window_val_0_2_fu_855_p0) * $signed({{1'b0}, {window_val_0_2_fu_855_p1}}));

assign window_val_1_0_fu_869_p0 = reg_708;

assign window_val_1_0_fu_869_p1 = window_val_1_0_fu_869_p10;

assign window_val_1_0_fu_869_p10 = reg_712;

assign window_val_1_0_fu_869_p2 = ($signed(window_val_1_0_fu_869_p0) * $signed({{1'b0}, {window_val_1_0_fu_869_p1}}));

assign window_val_1_1_fu_1085_p0 = reg_696;

assign window_val_1_1_fu_1085_p1 = window_val_1_1_fu_1085_p10;

assign window_val_1_1_fu_1085_p10 = lineBuff_val_1_load_2_reg_1594;

assign window_val_1_1_fu_1085_p2 = ($signed(window_val_1_1_fu_1085_p0) * $signed({{1'b0}, {window_val_1_1_fu_1085_p1}}));

assign window_val_1_2_fu_1099_p0 = reg_700;

assign window_val_1_2_fu_1099_p1 = window_val_1_2_fu_1099_p10;

assign window_val_1_2_fu_1099_p10 = reg_712;

assign window_val_1_2_fu_1099_p2 = ($signed(window_val_1_2_fu_1099_p0) * $signed({{1'b0}, {window_val_1_2_fu_1099_p1}}));

assign window_val_2_0_fu_977_p0 = reg_704;

assign window_val_2_0_fu_977_p1 = window_val_2_0_fu_977_p10;

assign window_val_2_0_fu_977_p10 = lineBuff_val_2_load_1_reg_1604;

assign window_val_2_0_fu_977_p2 = ($signed(window_val_2_0_fu_977_p0) * $signed({{1'b0}, {window_val_2_0_fu_977_p1}}));

assign window_val_2_1_fu_990_p0 = reg_708;

assign window_val_2_1_fu_990_p1 = window_val_2_1_fu_990_p10;

assign window_val_2_1_fu_990_p10 = lineBuff_val_2_load_2_reg_1609;

assign window_val_2_1_fu_990_p2 = ($signed(window_val_2_1_fu_990_p0) * $signed({{1'b0}, {window_val_2_1_fu_990_p1}}));

assign window_val_2_2_fu_1183_p0 = reg_704;

assign window_val_2_2_fu_1183_p1 = window_val_2_2_fu_1183_p10;

assign window_val_2_2_fu_1183_p10 = lineBuff_val_2_load_3_reg_1645;

assign window_val_2_2_fu_1183_p2 = ($signed(window_val_2_2_fu_1183_p0) * $signed({{1'b0}, {window_val_2_2_fu_1183_p1}}));

always @ (posedge ap_clk) begin
    tmp_i_reg_1492[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //processImage
